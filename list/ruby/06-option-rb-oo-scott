#!/usr/bin/env ruby

#     data Option a = None | Some { value :: a }

class Option
  attr_reader :match

  # :type match: (b, (a) -> b) -> b
  # :rtype:      List a
  def initialize match
    @match = match
  end

  # :rtype: List a
  def Option.none
    match = -> (n, s) { n }

    Option.new(match)
  end

  # :type a: a
  # :rtype:     Option a
  def Option.some(a)
    match = -> (n, s) { s.(a) }

    Option.new(match)
  end

  # :type other: List a
  # :rtype:      Boolean
  def ==(other)
    match.(
      other.match.(true, -> a { false }),
      -> a {
        other.match.(
          false,
          -> (b) { a == b }
        )
      }
    )
  end

  # :rtype:     String
  def to_s
    match.(
      "None",
      -> a { "Some<#{a.to_s}>" }
    )
  end

  # :rtype:     [a]
  def getOrElse(default)
    match.(
      default,
      -> a { a }
    )
  end

  # :type    f: a -> b
  # :rtype:     Option b
  def map f
    match.(
      self,
      -> a { Option.some(f.(a)) }
    )
  end

  # :type    f: a -> Option b
  # :rtype:     Option b
  def flatMap f
    match.(
      self,
      -> a { f.(a) }
    )
  end

  # :rtype:     Option a
  def flatten
    flatMap(-> a { a })
  end
end

testList(List)
