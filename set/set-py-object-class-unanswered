#!/usr/bin/env python


# We want to talk about the minimal interface needed to make a Set.
#
# An interface is merely a contract of what functions are available for a data
# type. Here is a simple notation for an interface that has one function called
# `contains` that takes an integer to a boolean:
#
#     { contains: Int -> Bool }
#
# We'd like to explore the idea of this interface being a minimal interface for
# defining an unordered set of integers.
#
# There are a few ways we can construct this interface in Python. Here's the
# way typically done with classes.

class Set:

    def __init__(self, contains_fn):
        self.__contains_fn = contains_fn

    def contains(self, i):
        return self.__contains_fn(i)

    # Now we need some ways to construct these sets. In Python, we often make
    # these constructors with static methods, when the constructor itself feels
    # too level.

    @staticmethod
    def empty():
        return Set(lambda i: False)

    @staticmethod
    def singleton(i):
        return "TODO"

    @staticmethod
    def multiple(*elems):
        return "TODO"

    # Now let's see if we can write all remaining functions based on contains,
    # or each other.

    def containsAll(self, *elems):
        return "TODO"

    def containsNo(self, *elems):
        return "TODO"

    def remove(self, i):
        return "TODO"

    def insert(self, i):
        return "TODO"

    def union(self, set):
        return "TODO"

    def intersection(self, set):
        return "TODO"


assert(not Set.empty().contains(1))

assert(Set.singleton(1).contains(1))

assert(
    (lambda s: s.contains(1) and not s.contains(2))
    (Set.singleton(1)))

assert(Set.empty().insert(1).contains(1))

assert(
    (lambda s: s.contains(1) and not s.contains(2))
    (Set.empty().insert(1)))

assert(not Set.singleton(1).remove(1).contains(1))

assert(
    (lambda s: s.contains(1) and not s.contains(2))
    (Set.singleton(1).remove(2)))

assert(
    (lambda s: s.containsAll(1, 2, 3, 4))
    (Set.multiple(1, 2).union(Set.multiple(3, 4))))

assert(
    (lambda s: s.contains(2) and s.containsNo(1, 3))
    (Set.multiple(1, 2).intersection(Set.multiple(2,3))))
